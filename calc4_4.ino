#include <Wire.h>
#include <LiquidCrystal_I2C.h>//SCL - A5, SDA - A4
#include <Keypad.h>
#include <avr/sleep.h>
#include <avr/interrupt.h>
#include <EEPROM.h>
#include "buzzer.h"
#include "shift_register.h"
#include "show_battery.h"

#define MONITOR_WIDTH 16
#define MONITOR_ROWS 2
#define CLEAR_PIN 2//key input pin normally in LOW
#define LONG_TIME_PUSH 1400
#define TIME_TO_PRINT 200
#define CHARGE_GRADE 8 //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –±–∞—Ç–∞—Ä–µ–∏ 

//max. –¥–ª–∏–Ω–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤ —á–∏—Å–µ–ª –∏ –∑–Ω–∞–∫–æ–≤. 
#define MAX_HALF_STRING 100 //–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –≤ 300 –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç SRAM, —Ñ—É–Ω–∫—Ü–∏—è calculate result() –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
#define MONITOR_POWER 13
#define EEPROM_ADDR 0x00

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–ª–µ—è I2C
LiquidCrystal_I2C lcd(0x27, MONITOR_WIDTH, MONITOR_ROWS);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', '+'},
  {'4', '5', '6', '-'},
  {'7', '8', '9', 'x'},
  {'.', '0', '=', '/'}
};

byte rowPins[ROWS] = {5, 6, 7, 8};
byte colPins[COLS] = {9, 10, 11, 12};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

//–í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è 
const unsigned long timeout = 1UL * 60UL * 1000UL; //1 –º–∏–Ω—É—Ç–∞

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
String input = "";
double result;

//—Ñ–ª–∞–≥–∏ 
bool timer_print = false;//–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
bool leading_zero = false;//set_string
bool dot = false;//–¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
bool math_sign = false; //–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π char - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
bool long_push = false;//–≤—ã–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞ r || R —Ñ—É–Ω–∫—Ü–∏–∏ set_string()
 
//–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
volatile unsigned long startPushTime = 0;//–≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è –°
volatile unsigned long startPrintTime = 0;//–≤—Ä–µ–º—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
volatile unsigned long lastActivityTime = 0;//—Å—Ç–∞—Ä—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –∑–∞—Å—ã–ø–∞–Ω–∏–µ–º

//—Ñ—É–Ω–∫—Ü–∏–∏
void wait_to_read();//–≤—Ä–µ–º—è –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
void calculate_result();//
void set_string(char new_char);
void print_string();
void printResult();
void saveStringToEEPROM(int addr, String data);
String readStringFromEEPROM(int addr);

void setup() {
  Serial.begin(9600);
  
  pinMode(latchPin, OUTPUT);//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ shift_register.h
  pinMode(clockPin, OUTPUT);//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ shift_register.h
  pinMode(dataPin, OUTPUT);//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ shift_register.h
  pinMode(ninthLedPin, OUTPUT);//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ shift_register.h
  digitalWrite(ninthLedPin, LOW);//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ shift_register.h
  pinMode(MONITOR_POWER, OUTPUT);
  digitalWrite(MONITOR_POWER, HIGH);   
  pinMode(CLEAR_PIN, INPUT); 

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Timer1 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–∑ –≤ 1 —Å–µ–∫—É–Ω–¥—É
  cli(); // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
  TCCR1A = 0; // –°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  TCCR1B = 0;
  TCNT1 = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
  OCR1A = 15624; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, 1 —Å–µ–∫ –ø—Ä–∏ —á–∞—Å—Ç–æ—Ç–µ 16MHz –∏ –ø—Ä–µ–¥–¥–µ–ª–∏—Ç–µ–ª–µ 1024
  TCCR1B |= (1 << WGM12); // –í–∫–ª—é—á–∏—Ç—å CTC —Ä–µ–∂–∏–º
  TCCR1B |= (1 << CS12) | (1 << CS10); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ 1024
  TIMSK1 |= (1 << OCIE1A); // –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
  sei(); // –í–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
  
  //–µ—Å–ª–∏ EEPROM –Ω–µ –ø—É—Å—Ç–æ–π (—Ç. –µ. –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Ö–æ–¥–∏–ª –≤ —Å–æ–Ω), —Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º input –∏–∑ –Ω–µ–≥–æ
  //–ø–µ—Ä–≤—ã–µ 2 –±–∞–π—Ç–∞ - –¥–ª–∏–Ω–∞ –∏–º–µ—é—â–µ–π—Å—è —Å—Ç—Ä–æ–∫–∏: –º–ª–∞–¥—à–∏–π, –ø–æ—Ç–æ–º —Å—Ç–∞—Ä—à–∏–π –±–∞–π—Ç—ã
  uint16_t len = EEPROM.read(EEPROM_ADDR) | (EEPROM.read(EEPROM_ADDR + 1) << 8);
  
  if(len){    
    for(uint16_t i = 2; i < len + 2 ; i++){
      input += (char)EEPROM.read(i);      
    }
    //–æ–±–Ω—É–ª—è–µ–º –¥–ª–∏–Ω—É, –Ω–∞ —Å–ª—É—á–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    EEPROM.write(EEPROM_ADDR, 0x00); // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –¥–ª–∏–Ω—ã
    EEPROM.write(EEPROM_ADDR + 1, 0x00); // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –¥–ª–∏–Ω—ã
  }
  updateShiftRegister(0);//—Å—Ç–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–¥–≤–∏–≥–æ–≤–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Hi, daddy's");
  lcd.setCursor(0, 1);
  lcd.print("clever girl :-)");
  wait_to_read();  

  start_show_battery_time = millis();
  lcd.clear();
  if(len){
    lcd.print(input);
  }
  else
  lcd.print("0");
  lastActivityTime = millis();

  //—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –ø–∏—Ç–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
  delay(100);  
  //–ø–µ—Ä–µ–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã –±–∞—Ç–∞—Ä–µ–∏üîã 
  createChars(lcd);  
  delay(50);  

}
///////////////////////////////////////////loop() START ///////////////////////////////////
void loop() {  
  //–∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–º–µ—Ä–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
  if((millis() - start_show_battery_time) >= 3000){
    //–∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è 
    long vcc = readVcc();
    int i = 0; 
    for(; i < CHARGE_GRADE - 1; i++){
      if(vcc < voltage[i])
      break;
    }  
    //–≤—ã–≤–æ–¥ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏     
    lcd.setCursor(15, 1);
    lcd.print(" ");
    lcd.setCursor(15, 1);
    lcd.write((uint8_t)(i));
    start_show_battery_time = millis(); 
  }   

  //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—á–∞—Ç–∏
  if(!timer_print){
  startPrintTime = millis();  
  timer_print = true;   
  }
 if(digitalRead(CLEAR_PIN)){
    startPushTime = millis(); 
    while(digitalRead(CLEAR_PIN)){
      if((millis() - startPushTime) >= LONG_TIME_PUSH) {
        long_push = true;
        break;
      }
    }
    if(long_push){
      long_push = false;
      set_string('R');  
      buzzer('R'); 
      updateShiftRegister(0);
    } 
    else {
      set_string('r');  
      buzzer('r'); 
      updateShiftRegister(0);
    } 
  }
  volatile char key = keypad.getKey();   
  if (key) {
    buzzer(key);   
    if(key >= '0' && key <= '9') {
      uint8_t led_number = key - '0';
      updateShiftRegister(led_number);
    }        
    lastActivityTime = millis();//–æ–±–Ω—É–ª—è–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è     
    if((millis() - startPrintTime) >= TIME_TO_PRINT) {
      set_string(key);
      print_string();       
      timer_print = false;
    }
  }
}
///////////////////////////////////////////loop() END ///////////////////////////////////

void wait_to_read(){  
  bool wait = true;
  while(wait){
    char key = keypad.getKey();           
    if(key || digitalRead(CLEAR_PIN)) wait = false;
  }
}

void calculate_result() {  
  // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ input
  int length = input.length();
  bool leading_negative = false;
  // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏–∑ input
  String temp_num;
  // —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ —á—Ç–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
  if (input[0] == '-') {
    leading_negative = true;
  }
  // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –∏–Ω–∞—á–µ —Å 0
  int start = leading_negative ? 1 : 0;
  // —Å–æ–∑–¥–∞–¥–∏–º –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞: –¥–ª—è —á–∏—Å–µ–ª –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  double number[MAX_HALF_STRING];  
  char math_action[MAX_HALF_STRING];
  // –∏–Ω–¥–µ–∫—Å—ã —á–∏—Å–µ–ª –∏ –º–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π
  int num_index = 0, math_action_index = 0;

  // —Å–æ—Ä—Ç–∏—Ä—É–µ–º input –≤ —ç—Ç–∏ –º–∞—Å—Å–∏–≤—ã
  for (int i = start; i < length && i < MAX_HALF_STRING; i++) {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª - —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ —Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ temp_num
    if ((input[i] >= '0' && input[i] <= '9') || input[i] == '.') {
      temp_num += input[i];
    }
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    else if (input[i] == '+' || input[i] == '-' || input[i] == 'x' || input[i] == '/') {
      // —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —á–∏—Å–ª–æ –≤ number[]
      if (temp_num.length() > 0) {
        number[num_index++] = temp_num.toDouble();
        temp_num = "";
      }
      // —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º char –≤ math_action[100]
      math_action[math_action_index++] = input[i];
    }
  }
  
  // —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ number[]
  if (temp_num.length() > 0) {
    number[num_index++] = temp_num.toDouble();
  }

  // –°–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ number[]
  // –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ math_action –±—É–¥–µ—Ç –Ω–∞ 1 –º–µ–Ω—å—à–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  // –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –≤–≤–æ–¥–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  int number_length = num_index;
  // —É—Å—Ç–∞–Ω–æ–≤–∏–º –∑–Ω–∞–∫ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
  if (leading_negative) {
    number[0] *= -1;
  }

  // —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–Ω–∞–∫–æ–≤ —Ö –∏ /, –∏—Ç–µ—Ä–∏—Ä—É—è—Å—å –ø–æ –º–∞—Å—Å–∏–≤—É math_action
  for (int i = 0; i < (number_length - 1) && i < MAX_HALF_STRING; i++) {
    // –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –¥–æ –∏–Ω–¥–µ–∫—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —Ö –∏–ª–∏ / –≤ math_action[]
    if (math_action[i] == 'x' || math_action[i] == '/') {
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      double temp = (math_action[i] == 'x') ? number[i] * number[i + 1] : number[i] / number[i + 1];
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ number[] –ø–æ –∏–Ω–¥–µ–∫—Å—É i
      number[i] = temp;
      // —Å–¥–≤–∏–≥–∞–µ–º –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ 1 —ç–ª–µ–º–µ–Ω—Ç –≤–ª–µ–≤–æ, i--, —Å —É—á–µ—Ç–æ–º –µ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –≤ —Ü–∏–∫–ª–µ
      for (int y = i + 1; y < (number_length - 1); y++) {
        number[y] = number[y + 1];
        math_action[y - 1] = math_action[y];
      }
      // —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–æ–≤
      number_length--;
      i--;
    }
  }

  // –ø–æ–ª–æ–∂–∏–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç number[0] –≤ result
  result = number[0];
  // –ó–¥–µ—Å—å —É–∂–µ –∏–º–µ–µ–º –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –±–µ–∑ —Ö –∏ /
  // –î–ª–∏–Ω–∞ math_action[] = number_length - 1 
  for (int i = 0; i < (number_length - 1); i++) {
    // –∏–¥–µ–º –ø–æ math_action[]
    if (math_action[i] == '+') {
      result += number[i + 1];
    } else {
      result -= number[i + 1];
    }
  }  
}


void set_string(char new_char){
  if(new_char == '-' || new_char == '+' || new_char == 'x' || new_char == '/' || new_char == '.') {
    updateShiftRegister(0);
  }
  math_sign = false;   
  if(new_char){  
    char last = input[input.length() - 1];
    if(last ==  '-' || last == '+' || last == 'x' || last == '/'){
      math_sign = true;      
    }  
    if(!input.length() && (new_char == '+' || new_char == 'x' || new_char == '/')) return; 
    //–∑–∞–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ –ª—é–±–æ–≥–æ –Ω–∞ –ª—é–±–æ–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ 
    if(new_char == '-' || new_char == '+' || new_char == 'x' || new_char == '/'){
      dot = false;
      leading_zero = false; 
      if(math_sign){
        input[input.length() - 1] = new_char;
        print_string();
      }
      else{
        input += new_char;
        print_string();
      }
    }
    //–≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –Ω—É–ª—è –∏–ª–∏ –Ω—É–ª—è –ø–æ—Å–ª–µ –º–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ 
    else if((new_char == '0') && (!input.length() || math_sign || (input.length() == 1 && input[0] == '-'))){      
      leading_zero = true; 
      input += new_char;            
    }
    //–∫–æ–Ω–∫–∞—Ç–∏–Ω–∞—Ü–∏—è —Ü–∏—Ñ—Ä—ã 0 - 9
    else if(new_char >= '0' && new_char <= '9'){
      //–Ω–µ—Ç –Ω–æ–ª—è –∫–∞–∫ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞
      if(!leading_zero){
        math_sign = false;
        leading_zero = false; 
        input += new_char;
        print_string();     
      }
      //–≤ —á–∏—Å–ª–µ 0 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞
      else{
        input[input.length() - 1] = new_char;
        math_sign = false;
        leading_zero = false;
        print_string();  
      } 
            
    }
    //new_char = r - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ —á–∏—Å–ª–∞, new_char = R - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
    else if((new_char == 'r' || new_char == 'R') && input.length()){
      if(new_char == 'r'){
        input.remove(input.length() - 1);
        print_string();
      }
      else {        
        input = "";
        print_string();        
      }
    }
    else if(new_char == '='){
      //—É–¥–∞–ª–∏–º –∑–Ω–∞–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º =
      if(last == '-' || last == '+' || last == 'x' || last == '/'){        
        input.remove(input.lastIndexOf(last));
        print_string();
      }      
      dot = false;
      calculate_result();
      updateShiftRegister(0);      
      while(!digitalRead(CLEAR_PIN)) {
        printResult(); delay(30);        
      } 
      buzzer('R');      
      input = "";     
    }
    else if (new_char == '.' && !dot){
      dot = true;
      leading_zero = false;
      if(!input.length() || math_sign){
        input += '0';
        input += new_char;
        print_string();
      }
      else{
        input += new_char;
        print_string();
      }
    }
    
  }  
}

void print_string(){   
  lcd.clear();
  lcd.setCursor(0, 0);
  short len = input.length();
  if (len){ 
    if(len <= 16) lcd.print(input);
    else{      
      short row_start = len - MONITOR_WIDTH;    
      lcd.print(input.substring(row_start));    
    }   
  }
  else{    
    lcd.print("0");
  }
  delay(10);  
}


void printResult() { 
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ result —Ä–∞–≤–µ–Ω 0, —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º "0"
  if (result == 0) {
    lcd.setCursor(0, 1);
    lcd.print("=0");
    Serial.println("0");
    return;
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º result –≤ —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  String str_result = String(result, 2);

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω–µ—á–Ω—ã–µ –Ω—É–ª–∏
  while (str_result.endsWith("0")) {
    str_result.remove(str_result.length() - 1);
  }

  // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ".", —É–¥–∞–ª—è–µ–º –µ—ë
  if (str_result.endsWith(".")) {
    str_result.remove(str_result.length() - 1);
  }

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∏ –≤ Serial
  lcd.setCursor(0, 1);
  lcd.print("=");
  lcd.print(str_result);   
}

ISR(TIMER1_COMPA_vect) {    
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è timeout —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  if (millis() - lastActivityTime >= timeout) {
    saveStringToEEPROM();
    updateShiftRegister(0);    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ —Ä–µ–∂–∏–º —Å–Ω–∞    
    digitalWrite(MONITOR_POWER, LOW);
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è —Å–Ω–∞
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    sleep_enable();
    sleep_mode();
    // –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ reset
    sleep_disable();
    cli(); // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
    sei(); // –í–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
  }
}

//  ->>EEPROM
void saveStringToEEPROM() {
  uint16_t len = input.length(); // –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (2 –±–∞–π—Ç–∞)
  EEPROM.write(EEPROM_ADDR, len & 0xFF); // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –¥–ª–∏–Ω—ã
  EEPROM.write(EEPROM_ADDR + 1, (len >> 8) & 0xFF); // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –¥–ª–∏–Ω—ã

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—É —Å—Ç—Ä–æ–∫—É
  for (uint16_t i = 0; i < len; i++) {
    EEPROM.write(EEPROM_ADDR + 2 + i, input[i]); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –¥–ª–∏–Ω—ã
  }
}

//  EEPROM->>
// String readStringFromEEPROM() {
//   uint16_t len = EEPROM.read(EEPROM_ADDR) | (EEPROM.read(EEPROM_ADDR + 1) << 8); // –ß–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (2 –±–∞–π—Ç–∞)
  
//   char input[len + 1]; // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
//   for (uint16_t i = 0; i < len; i++) {
//     input[i] = EEPROM.read(EEPROM_ADDR + 2 + i); // –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏
//   }
//   input[len] = '\0'; // –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –Ω—É–ª—å

//   return String(input); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
// }


